// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jobs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRemoteJob = `-- name: CreateRemoteJob :one
INSERT INTO jobs (id, created_at, updated_at, title, company, url,image, description,tag,location, published_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, created_at, updated_at, title, company, url, image, description, tag, location, published_at
`

type CreateRemoteJobParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Company     string
	Url         string
	Image       string
	Description sql.NullString
	Tag         sql.NullString
	Location    string
	PublishedAt sql.NullTime
}

func (q *Queries) CreateRemoteJob(ctx context.Context, arg CreateRemoteJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createRemoteJob,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Company,
		arg.Url,
		arg.Image,
		arg.Description,
		arg.Tag,
		arg.Location,
		arg.PublishedAt,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Company,
		&i.Url,
		&i.Image,
		&i.Description,
		&i.Tag,
		&i.Location,
		&i.PublishedAt,
	)
	return i, err
}

const getRemoteJobs = `-- name: GetRemoteJobs :many

SELECT id, created_at, updated_at, title, company, url, image, description, tag, location, published_at FROM jobs
`

func (q *Queries) GetRemoteJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, getRemoteJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Company,
			&i.Url,
			&i.Image,
			&i.Description,
			&i.Tag,
			&i.Location,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
